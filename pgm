section .data
    hello db 'Hello, World!', 0xA  ; 
    helloLen equ $ - hello         ; 

section .text
    global _start                  ; 

_start:
    mov rax, 1                    ; 
    mov rdi, 1                    ;
    mov rsi, hello                ; 
    mov rdx, helloLen             ; 
    syscall                       ; 

    ; Exit the program
    mov rax, 60                   ; 
    xor rdi, rdi                  ;
    syscall                       ; 






section .bss
    num resb 20          ; 

section .data
    prompt db 'Enter a number: ', 0
    promptLen equ $ - prompt

    output db 'You entered: ', 0
    outputLen equ $ - output

section .text
    global _start

_start:
    ; Display prompt
    mov rax, 1           ; 
    mov rdi, 1           ; 
    mov rsi, prompt
    mov rdx, promptLen
    syscall

    ; Read input
    mov rax, 0           ; 
    mov rdi, 0           ; 
    mov rsi, num
    mov rdx, 20
    syscall

    ; Display output
    mov rax, 1           ; 
    mov rdi, 1           ; 
    mov rsi, output
    mov rdx, outputLen
    syscall

    ; Write input back
    mov rax, 1           ; 
    mov rdi, 1           ; 
    mov rsi, num
    mov rdx, 20
    syscall

    ; Exit
    mov rax, 60          ; 
    xor rdi, rdi
    syscall





section .data
    hexinput dw 0x1F4B
    bcdout db 5 dup('0')
    newline db 10, 0
    ten dq 10

section .text
    global _start

_start:
    xor rax, rax
    mov ax, [hexinput]
    xor rdx, rdx
    lea rdi, [bcdout + 4]

convert_loop:
    xor rdx, rdx
    div qword [ten]
    add dl, '0'
    mov byte [rdi], dl
    dec rdi
    test rax, rax
    jnz convert_loop

    mov rax, 1
    mov rdi, 1
    lea rsi, [bcdout]
    mov rdx, 5
    syscall

    mov rax, 1
    mov rdi, 1
    lea rsi, [newline]
    mov rdx, 1
    syscall

    mov rax, 60
    xor rdi, rdi
    syscall







section .bss
    num1 resb 2           ; 
    num2 resb 2           ; 
    result resb 1         ; 

section .data
    msg1 db "Enter first number: ", 0
    msg2 db "Enter second number: ", 0
    msg_result db "The result is: ", 0
    newline db 0xA        ; 

section .text
    global _start         ; 

_start:
    ; Prompt for the first number
    mov rax, 1            ; 
    mov rdi, 1            ; 
    mov rsi, msg1         ; 
    mov rdx, 19           ; 
    syscall               ; 

    ; Read the first number
    mov rax, 0            ; 
    mov rdi, 0            ; 
    mov rsi, num1         ; 
    mov rdx, 2            ; 
    syscall               ; 

    ; Prompt for the second number
    mov rax, 1            ; 
    mov rdi, 1            ; 
    mov rsi, msg2         ; 
    mov rdx, 20           ; 
    syscall               ; 

    ; Read the second number
    mov rax, 0            ; 
    mov rdi, 0            ; 
    mov rsi, num2         ; 
    mov rdx, 2            ; 
    syscall               ; 

    ; Perform addition
    mov al, byte [num1]   ; 
    sub al, '0'           ; 
    mov bl, byte [num2]   ; 
    sub bl, '0'           ; 
    add al, bl            ; 
    add al, '0'           ; 
    mov [result], al      ; 

    ; Display the result message
    mov rax, 1            ; 
    mov rdi, 1            ; 
    mov rsi, msg_result   ; 
    mov rdx, 16           ; 
    syscall               ; 

    ; Display the result
    mov rax, 1            ; 
    mov rdi, 1            ; 
    mov rsi, result       ; 
    mov rdx, 1            ; 
    syscall               ; 

    ; Display a newline
    mov rax, 1            ; 
    mov rdi, 1            ; 
    mov rsi, newline      ; 
    mov rdx, 1            ; 
    syscall               ; 

    ; Exit the program
    mov rax, 60           ; 
    xor rdi, rdi          ; 
    syscall               ;  







%macro print 2
    mov rax, 1
    mov rdi, 1
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro read 2
    mov rax, 0
    mov rdi, 0
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

section .data
    m1 db 10d, "Enter String: "
    l1 equ $-m1
    m2 db 10d, "Length of String: "
    l2 equ $-m2
    m3 db 10d, "Reversed String: "
    l3 equ $-m3

section .bss
    string resb 50
    string2 resb 50
    length resb 16
    answer resb 16

section .text
    global _start

_start:
    print m1, l1
    read string, 50
    mov [length], rax
    print m2, l2
    mov rax, [length]

    mov rsi, answer + 15
    mov rcx, 16
loop1:
    mov rdx, 0
    mov rbx, 16
    div rbx
    cmp dl, 09h
    jbe skip1

    add dl, 07h
skip1:
    add dl, 30h
    mov [rsi], dl

    dec rsi
    dec rcx
    jnz loop1
    print answer, 16

    mov rsi, string
    mov rdi, string2
    mov rcx, [length]
    add rdi, rcx
    dec rdi

loop2:
    mov al, [rsi]
    mov [rdi], al
    dec rdi
    inc rsi
    loop loop2

    print m3, l3
    print string2, [length]

    mov rax, 60
    mov rdx, 0
    syscall






section .bss
    num1 resb 3
    num2 resb 3
    result resb 9

section .data
    prompt1 db "Enter first 8-bit hexadecimal number: ", 0
    prompt1Len equ $ - prompt1

    prompt2 db "Enter second 8-bit hexadecimal number: ", 0
    prompt2Len equ $ - prompt2

    output db "Result: ", 0
    outputLen equ $ - output

section .text
    global _start

_start:
    ; Prompt for the first hexadecimal number
    mov rax, 1              
    mov rdi, 1             
    mov rsi, prompt1      
    mov rdx, prompt1Len   
    syscall

    ; Read the first hexadecimal number (8-bit)
    mov rax, 0            
    mov rdi, 0            
    mov rsi, num1         
    mov rdx, 3            
    syscall

    ; Strip newline character
    mov byte [num1+2], 0    

    ; Convert first input string to integer
    lea rsi, [num1]        
    call hex_to_int        
    mov r8, rax           

    ; Prompt for the second hexadecimal number
    mov rax, 1     
    mov rdi, 1           
    mov rsi, prompt2    
    mov rdx, prompt2Len   
    syscall

    ; Read the second hexadecimal number (8-bit)
    mov rax, 0           
    mov rdi, 0        
    mov rsi, num2        
    mov rdx, 3      
    syscall

    ; Strip newline character
    mov byte [num2+2], 0   

    ; Convert second input string to integer
    lea rsi, [num2]   
    call hex_to_int 
    mov r9, rax     

    ; Perform multiplication using successive addition
    xor rax, rax            
    mov rcx, r9       
multiply_loop:
    add rax, r8         
    dec rcx               
    jnz multiply_loop    

    ; Convert the result to a hexadecimal string
    call int_to_hex      

    ; Display the result message
    mov rax, 1         
    mov rdi, 1           
    mov rsi, output      
    mov rdx, outputLen  
    syscall

    ; Display the result
    mov rax, 1        
    mov rdi, 1           
    mov rsi, result   
    mov rdx, 8        
    syscall

    ; Exit program
    mov rax, 60       
    xor rdi, rdi       
    syscall

; Function to convert hex string to integer
hex_to_int:
    xor rax, rax         
    xor rcx, rcx         
.next_hex_digit:
    movzx rbx, byte [rsi + rcx]
    cmp rbx, 0             
    je .done_hex_conversion 
    cmp rbx, 10            
    je .done_hex_conversion 
    sub rbx, '0'            
    cmp rbx, 9
    jbe .store_digit      
    sub rbx, 7             
.store_digit:
    imul rax, rax, 16       
    add rax, rbx         
    inc rcx               
    jmp .next_hex_digit
.done_hex_conversion:
    ret

; Function to convert integer to hexadecimal string
int_to_hex:
    mov rcx, 16          
    lea rdi, [result + 8]  
    mov byte [rdi], 0     

reverse_hex_digits:
    dec rdi           
    xor rdx, rdx       
    div rcx               
    add dl, '0'         
    cmp dl, '9'
    jbe .store_hex_digit   
    add dl, 'A' - '9' - 1   
.store_hex_digit:
    mov [rdi], dl         
    test rax, rax          
    jnz reverse_hex_digits  
    ret
